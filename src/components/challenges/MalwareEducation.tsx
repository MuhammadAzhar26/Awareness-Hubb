import { useState } from 'react'
import { Bug, Shield, AlertTriangle, ChevronDown, ChevronUp, CheckCircle } from 'lucide-react'

interface MalwareType {
  id: string
  name: string
  icon: string
  description: string
  howItWorks: string
  examples: string[]
  prevention: string[]
}

interface MalwareEducationProps {
  malwareTypes: MalwareType[]
  requiredLearning: number
  onSubmit: (answer: string) => void
  disabled?: boolean
}

export default function MalwareEducation({ 
  malwareTypes, 
  requiredLearning, 
  onSubmit, 
  disabled 
}: MalwareEducationProps) {
  const [expandedTypes, setExpandedTypes] = useState<string[]>([])
  const [completedTypes, setCompletedTypes] = useState<string[]>([])
  const [showHint, setShowHint] = useState(false)

  const toggleExpand = (typeId: string) => {
    if (expandedTypes.includes(typeId)) {
      setExpandedTypes(expandedTypes.filter(id => id !== typeId))
    } else {
      setExpandedTypes([...expandedTypes, typeId])
    }
  }

  const markAsLearned = (typeId: string) => {
    if (!completedTypes.includes(typeId)) {
      setCompletedTypes([...completedTypes, typeId])
    }
  }

  const handleSubmit = () => {
    onSubmit(completedTypes.sort().join(','))
  }

  return (
    <div className="space-y-6">
      {/* Instructions */}
      <div className="bg-primary-900/20 border border-primary-700 p-4 rounded-lg">
        <p className="text-body text-neutral-100">
          <strong>Goal:</strong> Learn about different types of malware by reading each section. 
          Mark at least {requiredLearning} malware types as learned to complete the challenge.
        </p>
      </div>

      {/* Learning Progress */}
      <div className="bg-neutral-800 border border-neutral-700 p-6 rounded-lg">
        <div className="flex items-center justify-between mb-3">
          <div className="text-h4 text-neutral-100">Learning Progress</div>
          <div className="text-body text-primary-400 font-semibold">
            {completedTypes.length} / {requiredLearning} required
          </div>
        </div>
        <div className="w-full bg-neutral-700 rounded-full h-3">
          <div
            className="h-3 bg-primary-500 rounded-full transition-all duration-300"
            style={{ width: `${Math.min((completedTypes.length / requiredLearning) * 100, 100)}%` }}
          />
        </div>
      </div>

      {/* Malware Types */}
      <div className="space-y-3">
        {malwareTypes.map((malware) => {
          const isExpanded = expandedTypes.includes(malware.id)
          const isCompleted = completedTypes.includes(malware.id)

          return (
            <div
              key={malware.id}
              className={`border-2 rounded-lg overflow-hidden transition-all ${
                isCompleted
                  ? 'bg-success-900/20 border-success-700'
                  : 'bg-neutral-800 border-neutral-700'
              }`}
            >
              {/* Header */}
              <button
                onClick={() => toggleExpand(malware.id)}
                className="w-full p-4 flex items-center justify-between hover:bg-neutral-900/50 transition-colors"
              >
                <div className="flex items-center gap-3">
                  <div className="text-h3">{malware.icon}</div>
                  <div className="text-left">
                    <div className="text-body font-semibold text-neutral-100 flex items-center gap-2">
                      {malware.name}
                      {isCompleted && <CheckCircle className="w-4 h-4 text-success-400" />}
                    </div>
                    <div className="text-small text-neutral-400">
                      {malware.description}
                    </div>
                  </div>
                </div>
                {isExpanded ? (
                  <ChevronUp className="w-5 h-5 text-neutral-400 flex-shrink-0" />
                ) : (
                  <ChevronDown className="w-5 h-5 text-neutral-400 flex-shrink-0" />
                )}
              </button>

              {/* Content */}
              {isExpanded && (
                <div className="p-4 border-t border-neutral-700 bg-neutral-900/30 space-y-4">
                  {/* How It Works */}
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <Bug className="w-4 h-4 text-error-400" />
                      <div className="text-small font-semibold text-neutral-100">How It Works</div>
                    </div>
                    <p className="text-small text-neutral-300 ml-6">
                      {malware.howItWorks}
                    </p>
                  </div>

                  {/* Examples */}
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <AlertTriangle className="w-4 h-4 text-warning-400" />
                      <div className="text-small font-semibold text-neutral-100">Common Examples</div>
                    </div>
                    <ul className="space-y-1 ml-6">
                      {malware.examples.map((example, idx) => (
                        <li key={idx} className="text-small text-neutral-300">
                          • {example}
                        </li>
                      ))}
                    </ul>
                  </div>

                  {/* Prevention */}
                  <div>
                    <div className="flex items-center gap-2 mb-2">
                      <Shield className="w-4 h-4 text-success-400" />
                      <div className="text-small font-semibold text-neutral-100">How to Protect Yourself</div>
                    </div>
                    <ul className="space-y-1 ml-6">
                      {malware.prevention.map((tip, idx) => (
                        <li key={idx} className="text-small text-neutral-300">
                          • {tip}
                        </li>
                      ))}
                    </ul>
                  </div>

                  {/* Mark as Learned Button */}
                  {!isCompleted && (
                    <button
                      onClick={() => markAsLearned(malware.id)}
                      disabled={disabled}
                      className={`w-full py-2 px-4 rounded-lg font-medium transition-all ${
                        disabled
                          ? 'bg-neutral-700 text-neutral-500 cursor-not-allowed'
                          : 'bg-primary-600 text-white hover:bg-primary-700'
                      }`}
                    >
                      Mark as Learned
                    </button>
                  )}

                  {isCompleted && (
                    <div className="flex items-center justify-center gap-2 py-2 text-success-400">
                      <CheckCircle className="w-5 h-5" />
                      <span className="text-small font-medium">Completed</span>
                    </div>
                  )}
                </div>
              )}
            </div>
          )
        })}
      </div>

      {/* Hint Section */}
      <div className="bg-neutral-900 border border-neutral-800 p-4 rounded-lg">
        <button
          onClick={() => setShowHint(!showHint)}
          className="flex items-center gap-2 text-warning-400 hover:text-warning-300 transition-colors"
        >
          <Shield className="w-5 h-5" />
          <span className="text-small font-medium">
            {showHint ? 'Hide Malware Protection Tips' : 'Show Malware Protection Tips'}
          </span>
        </button>
        
        {showHint && (
          <div className="mt-4 space-y-2 text-body text-neutral-300">
            <p>• Keep your operating system and software updated</p>
            <p>• Install reputable antivirus software and keep it current</p>
            <p>• Be cautious with email attachments and downloads</p>
            <p>• Use strong, unique passwords for all accounts</p>
            <p>• Regularly backup important data</p>
            <p>• Avoid clicking on suspicious links or pop-ups</p>
          </div>
        )}
      </div>

      {/* Submit Button */}
      <button
        onClick={handleSubmit}
        disabled={completedTypes.length < requiredLearning || disabled}
        className={`w-full py-3 px-6 rounded-lg font-semibold transition-all ${
          completedTypes.length < requiredLearning || disabled
            ? 'bg-neutral-700 text-neutral-500 cursor-not-allowed'
            : 'bg-primary-600 text-white hover:bg-primary-700 shadow-dark-card hover:shadow-dark-card-hover'
        }`}
      >
        {disabled 
          ? 'Submitting...' 
          : completedTypes.length < requiredLearning
          ? `Learn ${requiredLearning - completedTypes.length} more types`
          : 'Complete Learning'}
      </button>
    </div>
  )
}
